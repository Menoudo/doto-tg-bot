# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
  FILE_TO_COPY: "/todo-tg-bot"

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Build pipeline docker image..."
    - docker build -f Dockerfile . -t ${DOCKER_ENV_CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} --build-arg branch=${CI_COMMIT_REF_NAME}
    - docker push $DOCKER_ENV_CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  after_script:
    - docker run $DOCKER_ENV_CI_REGISTRY_IMAGE:$CI_COMMIT_SHA cp /go/todo-tg-bot/todo-tg-bot $FILE_TO_COPY
  artifacts:
    paths:
      - $FILE_TO_COPY
    expire_in: 1 week

# build-job-2:
#   stage: build
#   image: golang:1.22.1-alpine3.19
#   script:
#     - apk add --update git; apk add curl; mkdir -p ${GOPATH}/todo-tg-bot
#     - cp *.go ${GOPATH}/todo-tg-bot/
#     - cp go.* ${GOPATH}/todo-tg-bot/
#     - cd ${GOPATH}/todo-tg-bot/
#     - go build -o todo-tg-bot .


# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  image: $CI_COMMIT_SHA
  script:
    - cd ${GOPATH}/todo-tg-bot/
    - golangci-lint --version
    - golangci-lint run

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
